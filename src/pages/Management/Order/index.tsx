import { useState } from "react";
import {
  Table,
  Modal,
  Form,
  Input,
  Row,
  Col,
  Card,
  Tag,
  Button,
  Descriptions,
  Select,
  DatePicker,
} from "antd";
import type { ColumnsType, TablePaginationConfig } from "antd/es/table";
import { EyeOutlined } from "@ant-design/icons";

const { Option } = Select;

interface IOrder {
  id: string;
  customer: string;
  items: { product: string; quantity: number; price: number }[];
  total: number;
  status: "ƒêang x·ª≠ l√Ω" | "ƒêang giao" | "Ho√†n t·∫•t" | "Hu·ª∑";
  orderDate: string;
  deliveryDate?: string;
}

export default function OrderManagementPage() {
  const [filterForm] = Form.useForm();

  const initialData: IOrder[] = [
    {
      id: "DH0001",
      customer: "Nguy·ªÖn VƒÉn A",
      items: [
        { product: "B√°nh m√¨ th·ªãt", quantity: 2, price: 20000 },
        { product: "C√† ph√™ s·ªØa", quantity: 1, price: 15000 },
      ],
      total: 55000,
      status: "ƒêang x·ª≠ l√Ω",
      orderDate: "28/10/2025",
    },
    {
      id: "DH0002",
      customer: "Tr·∫ßn Th·ªã B",
      items: [{ product: "Tr√† chanh", quantity: 3, price: 12000 }],
      total: 36000,
      status: "ƒêang giao",
      orderDate: "27/10/2025",
      deliveryDate: "28/10/2025",
    },
    {
      id: "DH0003",
      customer: "L√™ VƒÉn C",
      items: [
        { product: "B√°nh m√¨ th·ªãt", quantity: 1, price: 20000 },
        { product: "Tr√† chanh", quantity: 2, price: 12000 },
      ],
      total: 44000,
      status: "Ho√†n t·∫•t",
      orderDate: "26/10/2025",
      deliveryDate: "27/10/2025",
    },
  ];

  const [data, setData] = useState<IOrder[]>(initialData);
  const [pagination, setPagination] = useState<TablePaginationConfig>({
    current: 1,
    pageSize: 5,
    total: initialData.length,
  });

  const [viewModalVisible, setViewModalVisible] = useState(false);
  const [viewingItem, setViewingItem] = useState<IOrder | null>(null);
  const [selectedRowKeys, setSelectedRowKeys] = useState<React.Key[]>([]);

  const rowSelection = {
    selectedRowKeys,
    onChange: (newSelectedRowKeys: React.Key[]) =>
      setSelectedRowKeys(newSelectedRowKeys),
  };

  /** üîπ Actions */
  const handleView = (item: IOrder) => {
    setViewingItem(item);
    setViewModalVisible(true);
  };

  const handleUpdateStatus = (id: string, newStatus: IOrder["status"]) => {
    setData((prev) =>
      prev.map((d) => (d.id === id ? { ...d, status: newStatus } : d))
    );
  };

  /** üîπ Columns */
  const columns: ColumnsType<IOrder> = [
    {
      title: "M√£ ƒë∆°n",
      dataIndex: "id",
      key: "id",
      align: "center",
      width: 120,
    },
    { title: "Kh√°ch h√†ng", dataIndex: "customer", key: "customer" },
    {
      title: "T·ªïng ti·ªÅn",
      dataIndex: "total",
      key: "total",
      align: "right",
      render: (val: number) => val.toLocaleString("vi-VN") + " ƒë",
    },
    {
      title: "Tr·∫°ng th√°i",
      dataIndex: "status",
      key: "status",
      align: "center",
      render: (val: IOrder["status"]) => {
        let color = "blue";
        if (val === "ƒêang x·ª≠ l√Ω") color = "orange";
        if (val === "ƒêang giao") color = "cyan";
        if (val === "Ho√†n t·∫•t") color = "green";
        if (val === "Hu·ª∑") color = "red";
        return <Tag color={color}>{val}</Tag>;
      },
    },
    {
      title: "Ng√†y ƒë·∫∑t",
      dataIndex: "orderDate",
      key: "orderDate",
      align: "center",
    },
    {
      title: "Ng√†y giao",
      dataIndex: "deliveryDate",
      key: "deliveryDate",
      align: "center",
    },
    {
      title: "Thao t√°c",
      key: "action",
      align: "center",
      fixed: "right",
      width: 150,
      render: (_, record) => (
        <div style={{ display: "flex", gap: 12, justifyContent: "center" }}>
          <EyeOutlined
            style={{ cursor: "pointer" }}
            onClick={() => handleView(record)}
          />
        </div>
      ),
    },
  ];

  return (
    <div>
      {/* Form t√¨m ki·∫øm */}
      <Card style={{ margin: "24px 0px" }} title="T√¨m ki·∫øm ƒë∆°n h√†ng">
        <Form form={filterForm} layout="vertical">
          <Row gutter={16}>
            <Col span={6}>
              <Form.Item label="M√£ ƒë∆°n" name="id">
                <Input placeholder="Nh·∫≠p m√£ ƒë∆°n" allowClear />
              </Form.Item>
            </Col>
            <Col span={6}>
              <Form.Item label="Kh√°ch h√†ng" name="customer">
                <Input placeholder="Nh·∫≠p t√™n kh√°ch h√†ng" allowClear />
              </Form.Item>
            </Col>
            <Col span={6}>
              <Form.Item label="Tr·∫°ng th√°i" name="status">
                <Select allowClear placeholder="Ch·ªçn tr·∫°ng th√°i">
                  <Option value="ƒêang x·ª≠ l√Ω">ƒêang x·ª≠ l√Ω</Option>
                  <Option value="ƒêang giao">ƒêang giao</Option>
                  <Option value="Ho√†n t·∫•t">Ho√†n t·∫•t</Option>
                  <Option value="Hu·ª∑">Hu·ª∑</Option>
                </Select>
              </Form.Item>
            </Col>
            <Col span={6}>
              <Form.Item label="Ng√†y ƒë·∫∑t" name="orderDate">
                <DatePicker style={{ width: "100%" }} />
              </Form.Item>
            </Col>
          </Row>
          <div className="flex-center">
            <Button
              type="primary"
              ghost
              onClick={() => {
                const { id, customer, status, orderDate } =
                  filterForm.getFieldsValue();
                setData(
                  initialData.filter((d) => {
                    return (
                      (!id || d.id.includes(id)) &&
                      (!customer || d.customer.includes(customer)) &&
                      (!status || d.status === status) &&
                      (!orderDate ||
                        d.orderDate === orderDate?.format("DD/MM/YYYY"))
                    );
                  })
                );
              }}
            >
              T√¨m ki·∫øm
            </Button>
          </div>
        </Form>
      </Card>

      {/* Table */}
      <Table
        rowKey="id"
        columns={columns}
        dataSource={data}
        pagination={pagination}
        rowSelection={rowSelection}
      />

      {/* Modal xem chi ti·∫øt */}
      <Modal
        open={viewModalVisible}
        title="Chi ti·∫øt ƒë∆°n h√†ng"
        onCancel={() => setViewModalVisible(false)}
        footer={null}
        width={800}
      >
        {viewingItem && (
          <>
            <Descriptions
              column={1}
              bordered
              size="small"
              labelStyle={{ fontWeight: 500 }}
            >
              <Descriptions.Item label="M√£ ƒë∆°n">
                {viewingItem.id}
              </Descriptions.Item>
              <Descriptions.Item label="Kh√°ch h√†ng">
                {viewingItem.customer}
              </Descriptions.Item>
              <Descriptions.Item label="Tr·∫°ng th√°i">
                <Tag
                  color={
                    viewingItem.status === "ƒêang x·ª≠ l√Ω"
                      ? "orange"
                      : viewingItem.status === "ƒêang giao"
                      ? "cyan"
                      : viewingItem.status === "Ho√†n t·∫•t"
                      ? "green"
                      : "red"
                  }
                >
                  {viewingItem.status}
                </Tag>
              </Descriptions.Item>
              <Descriptions.Item label="Ng√†y ƒë·∫∑t">
                {viewingItem.orderDate}
              </Descriptions.Item>
              <Descriptions.Item label="Ng√†y giao">
                {viewingItem.deliveryDate || "-"}
              </Descriptions.Item>
            </Descriptions>

            <Card
              size="small"
              title="Chi ti·∫øt s·∫£n ph·∫©m"
              style={{ marginTop: 16 }}
            >
              <Table
                size="small"
                rowKey={(record) => record.product}
                columns={[
                  { title: "S·∫£n ph·∫©m", dataIndex: "product", key: "product" },
                  {
                    title: "S·ªë l∆∞·ª£ng",
                    dataIndex: "quantity",
                    key: "quantity",
                    align: "center",
                  },
                  {
                    title: "Gi√°",
                    dataIndex: "price",
                    key: "price",
                    align: "right",
                    render: (val: number) => val.toLocaleString("vi-VN") + " ƒë",
                  },
                  {
                    title: "Th√†nh ti·ªÅn",
                    key: "total",
                    align: "right",
                    render: (_, record) =>
                      (record.quantity * record.price).toLocaleString("vi-VN") +
                      " ƒë",
                  },
                ]}
                dataSource={viewingItem.items}
                pagination={false}
              />
              <div
                style={{ textAlign: "right", marginTop: 8, fontWeight: 500 }}
              >
                T·ªïng: {viewingItem.total.toLocaleString("vi-VN")} ƒë
              </div>
            </Card>
          </>
        )}
      </Modal>
    </div>
  );
}
