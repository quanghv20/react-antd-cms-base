import axios, {
  AxiosError,
  type AxiosInstance,
  type AxiosResponse,
  type InternalAxiosRequestConfig,
} from "axios";
import { authService } from "./auth/auth.service";
import { storage } from "@/utils/storage";

const API_BASE_URL = import.meta.env.VITE_API_BASE_URL as string;

// extend th√™m field noAuth
interface CustomAxiosRequestConfig extends InternalAxiosRequestConfig {
  noAuth?: boolean;
  _retry?: boolean;
}

// T·∫°o instance axios
const configService: AxiosInstance = axios.create({
  baseURL: API_BASE_URL,
  timeout: 10000,
  headers: {
    "Content-Type": "application/json",
  },
});

// Request interceptor: g·∫Øn Authorization (tr·ª´ khi c√≥ noAuth)
configService.interceptors.request.use(
  (config: CustomAxiosRequestConfig) => {
    if (!config.noAuth) {
      const accessToken = storage.getAccessToken();
      if (accessToken) {
        config.headers["Authorization"] = `Bearer ${accessToken}`;
      }
    }
    return config;
  },
  (error: AxiosError) => Promise.reject(error)
);

// Response interceptor
configService.interceptors.response.use(
  (response: AxiosResponse) => response,
  async (error: AxiosError) => {
    const originalRequest = error.config as CustomAxiosRequestConfig;
    const status = error.response?.status;

    // Case 401 ho·∫∑c 403: th·ª≠ refresh token 1 l·∫ßn
    if (
      (status === 401 || status === 403) &&
      !originalRequest._retry &&
      !originalRequest.noAuth &&
      !originalRequest.url?.includes("/auth/refresh") // tr√°nh loop refresh
    ) {
      originalRequest._retry = true;

      try {
        // üü¢ Th·ª≠ refresh token qua service c√≥ s·∫µn
        const res = await authService.refreshToken();

        if (res?.access_token) {
          const newAccessToken = res.access_token;
          const newRefreshToken = res.refresh_token;

          // L∆∞u token m·ªõi
          if (newRefreshToken) {
            storage.setAccessToken(newAccessToken);
            storage.setRefreshToken(newRefreshToken);
          }

          // G·∫Øn token m·ªõi v√†o request g·ªëc
          if (!originalRequest.headers) {
            originalRequest.headers = {} as any;
          }
          (
            originalRequest.headers as any
          ).Authorization = `Bearer ${newAccessToken}`;

          console.log("newAccessToken: ", newAccessToken);

          // ‚úÖ Retry l·∫°i request g·ªëc v·ªõi token m·ªõi
          return configService(originalRequest);
        }
      } catch (refreshError) {
        // üü• Refresh token th·∫•t b·∫°i
        if (import.meta.env.MODE === "development") {
          console.error(
            "[Auth Interceptor] Refresh token failed:",
            refreshError
          );
        }

        // N·∫øu server tr·∫£ v·ªÅ l·ªói 401/403 khi refresh ‚Üí clear v√† redirect
        const refreshStatus =
          (refreshError as AxiosError)?.response?.status ?? 0;
        if (refreshStatus === 401 || refreshStatus === 403) {
          localStorage.clear();
          window.location.href = "/login?expired=1";
        }
      }

      // üü• N·∫øu refresh th·∫•t b·∫°i (ho·∫∑c kh√¥ng c√≥ token m·ªõi) ‚Üí x·ª≠ l√Ω nh∆∞ logic g·ªëc
      if (status === 401) {
        localStorage.clear();
        window.location.href = "/login?expired=1";
      }

      if (status === 403) {
        window.location.href = "/login?forbidden=1";
      }
    }

    // üî∏ Normalize & reject l·ªói
    const message =
      (error.response?.data as any)?.message ||
      error.message ||
      "C√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i";

    if (import.meta.env.MODE === "development") {
      console.error("[Axios Error]", {
        url: error.config?.url,
        status,
        message,
      });
    }

    return Promise.reject(new Error(message));
  }
);

export { configService };
